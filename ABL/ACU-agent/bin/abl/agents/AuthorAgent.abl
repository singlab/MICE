package abl.generated;
// the package corresponds to where generated Java files are placed.

import abl.wmes.*;
import abl.actions.*;
import abl.sensors.*;
import java.lang.*;
// Imports are used the same way as in Java. Its necessary to import Sensor, Action, and WME classes.
/** 
 * A simple agent that moves towards the player and occassionally fires bullets.
 *
 * @author Josh McCoy 1-23-2019
 * @author Ben Weber 3-7-11
 */ 
behaving_entity AuthorAgent {
// This defines a name for the agent 

	/** 
	 * Define the physicals actions that the agent can perform. The definition includes an action prototype and
	 * and an action class name. The class name must be a Java class which has been imported. 
	 *
	 * The prototype parameters correspond to the types expected by the execute(object[]) method 
	 * in the action's Java class.
	 */
	register act stop(int) with Stop;
	register act testAction(String) with TestAction;
	register act SendData(String) with SendDataAction;


	/**
	 * Define the sensors that add game state to working memory. Each sensor defines the name of the WME class
	 * that it is responsible for managing and the Java sensor class that implements the functionality. 
	 */
    register wme TagWME with TestSensor;
    register wme ChoiceWME with ChoiceSensor;
    register wme LocationWME with LocationSensor;
    


	/**
	 * Defines a variable scope to the agent, which can be used and modified in behaviors. 
	 *
	 * It is also possible to use constants from a Java interface (e.g.):
     * constants game.Constants;   
	 */ 	
    
    sequential behavior MICERoot() {
    	with (persistent) subgoal MICENode();
	}
    sequential behavior MICENode() {
    	subgoal startEvent();
//    	spawngoal MICERoot();
    }
    // TODO: Bind the type, then pass it through the substeps.
	sequential behavior startEvent() {
		precondition {
			(TagWME)
		}
		String tagEnd = "";
	    mental_act { 
	    	System.out.println("Starting event wait.");
	    }
	    with (success_test {(TagWME tag == "begin") }) wait;
	    subgoal BeginEvent();
	}
	sequential behavior BeginEvent() {
		mental_act { 
	    	System.out.println("EVENT should go out to the Ink game.");
	    }
		act SendData("0Switch");

	}
	
	sequential behavior endThread(String thread_name) {
		mental_act { 
	    	System.out.println("ENDING EVENT.");
	    }
	    act SendData(thread_name);
	}
	sequential behavior Wait(int milliseconds) {
		long finish;
	    mental_act { 
	    	finish = System.currentTimeMillis() + milliseconds; 
	    }
	    
	    with ( success_test { (System.currentTimeMillis() > finish) } ) wait;
	}
    /** 
     * Root of the active behavior tree.
     *
     * Note: this is a parallel behavior.
     * Note: the ABL compiler expects this to be the last behavior defined in the agent. 
     * Note: prioirities are used to ensure all goals are pursued, since the move() goal can thrash in this simple example
     */
    initial_tree {
    	with (priority 3) mental_act {
			System.out.println("Starting bot Agent");
    	}
    	with (persistent) subgoal MICERoot();
    }
}
